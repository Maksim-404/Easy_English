from aiogram import types, F
from aiogram.types import Message
from aiogram.filters import CommandStart

# –Ø –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ config.py
from config import user_states, WORD_SETS
from config import get_user, create_user, update_user_name, update_user_level

async def start_learning_session(message: Message, level: str):
    # –Ø –Ω–∞—á–∏–Ω–∞—é —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    words = WORD_SETS[level]['words']
    
    # –Ø —Å–æ–∑–¥–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    user_states[user_id] = {
        'mode': 'learning_words',
        'level': level,
        'current_word_index': 0,
        'words_learned': 0
    }
    
    await show_current_word(message, user_id)

async def show_current_word(message: Message, user_id: int):
    # –Ø –ø–æ–∫–∞–∑—ã–≤–∞—é —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_state = user_states[user_id]
    word_index = user_state['current_word_index']
    words = WORD_SETS[user_state['level']]['words']
    current_word = words[word_index]
    
    # –Ø —Å–æ–∑–¥–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏–µ–º
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text='‚úÖ –í—ã—É—á–∏–ª')],
            [types.KeyboardButton(text='‚è≠Ô∏è –°–ª–µ–¥—É—é—â–µ–µ')],
            [types.KeyboardButton(text='üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å')]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        f'üìñ –°–ª–æ–≤–æ {word_index + 1} –∏–∑ {len(words)}\n\n'
        f'üá¨üáß <b>{current_word["english"]}</b>\n'
        f'üá∑üá∫ {current_word["russian"]}',
        reply_markup=keyboard,
        parse_mode='HTML'
    )

async def finish_session(message: Message, user_state: dict, words: list, completed: bool):
    # –Ø –∑–∞–≤–µ—Ä—à–∞—é —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    user_id = message.from_user.id
    
    if completed:
        text = f'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –≤—ã—É—á–∏–ª –≤—Å–µ {len(words)} —Å–ª–æ–≤!\n'
    else:
        text = 'üèÅ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n'
    
    text += f'üìä –í—ã—É—á–µ–Ω–æ —Å–ª–æ–≤: {user_state["words_learned"]}/{len(words)}'
    
    await message.answer(text, reply_markup=types.ReplyKeyboardRemove())
    user_states[user_id] = 'ready'

# –Ø —Å–æ–∑–¥–∞—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(message: Message):
    user_states[message.from_user.id] = 'waiting_name'
    welcome_text = (
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Easy English, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ üá¨üáß\n\n'
        'üìö –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ª—É—á—à–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å –ª—é–±–æ–≥–æ —É—Ä–æ–≤–Ω—è!\n\n'
        '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?'
    )
    remove_keyboard = types.ReplyKeyboardRemove()
    await message.answer(welcome_text, reply_markup=remove_keyboard, parse_mode='HTML')

# –Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_name_input(message: Message):
    user_id = message.from_user.id
    user_name = message.text.strip()
    
    # –Ø –ø—Ä–æ–≤–µ—Ä—è—é —á—Ç–æ –∏–º—è —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤
    if not user_name.replace(' ', '').isalpha():
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∏–º—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤–∞–º–∏, –±–µ–∑ —Ü–∏—Ñ—Ä –∏ —Å–∏–º–≤–æ–ª–æ–≤')
        return
    
    if len(user_name) < 2:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 –±—É–∫–≤—ã)')
        return
    
    # –Ø —Å–æ—Ö—Ä–∞–Ω—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    existing_user = get_user(user_id)
    if existing_user:
        update_user_name(user_id, user_name)
    else:
        create_user(user_id, user_name)
    
    user_states[user_id] = 'waiting_level'
    
    # –Ø —Å–æ–∑–¥–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
    levels_keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text='üå± –ù–∞—á–∞–ª—å–Ω—ã–π')],
            [types.KeyboardButton(text='üéØ –°—Ä–µ–¥–Ω–∏–π')],
            [types.KeyboardButton(text='üöÄ –ü—Ä–æ—Ñ–∏')]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name}! üéâ\n\n'
        '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ:',
        reply_markup=levels_keyboard
    )

# –Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def handle_level_selection(message: Message):
    user_id = message.from_user.id
    level = message.text
    
    # –Ø –ø—Ä–æ–≤–µ—Ä—è—é —á—Ç–æ –≤—ã–±—Ä–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    if level not in WORD_SETS:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        return
    
    update_user_level(user_id, level)
    await start_learning_session(message, level)

# –Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–Ω–æ–ø–∫—É "–í—ã—É—á–∏–ª"
async def mark_word_learned(message: Message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id)
    
    # –Ø –ø—Ä–æ–≤–µ—Ä—è—é —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤
    if isinstance(user_state, dict) and user_state.get('mode') == 'learning_words':
        user_state['words_learned'] += 1
        user_state['current_word_index'] += 1
        words = WORD_SETS[user_state['level']]['words']
        
        if user_state['current_word_index'] >= len(words):
            await finish_session(message, user_state, words, True)
        else:
            await show_current_word(message, user_id)

# –Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–µ–µ"
async def next_word(message: Message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id)
    
    if isinstance(user_state, dict) and user_state.get('mode') == 'learning_words':
        user_state['current_word_index'] += 1
        words = WORD_SETS[user_state['level']]['words']
        
        if user_state['current_word_index'] >= len(words):
            await finish_session(message, user_state, words, False)
        else:
            await show_current_word(message, user_id)

# –Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
async def finish_learning(message: Message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id)
    
    if isinstance(user_state, dict) and user_state.get('mode') == 'learning_words':
        words = WORD_SETS[user_state['level']]['words']
        await finish_session(message, user_state, words, False)
        